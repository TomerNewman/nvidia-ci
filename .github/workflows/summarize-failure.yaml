name: Summarize Failed CI Logs with AI

on:
  check_run:
    types: [completed]

jobs:
  summarize-failure:
    if: ${{ github.event.check_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('workflows/summarize-requirements.txt') }}

      - name: Cache AI huggingface model
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: hf-models-${{ runner.os }}-distilbart-cnn

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install summarization dependencies
        run: pip install -r workflows/summarize-requirements.txt

      - name: Download failed Prow logs
        id: fetch-logs
        run: |
          DETAILS_URL="${{ github.event.check_run.details_url }}"
          echo "DETAILS_URL=$DETAILS_URL"

          # convert prow view to GCS web viewer path
          GCS_URL=$(echo "$DETAILS_URL" | sed 's|https://prow.ci.openshift.org/view/gs/|https://gcsweb-ci.apps.ci.l2s4.p1.openshiftapps.com/gcs/|')
          echo "Resolved GCS URL: $GCS_URL"

          # try downloading the build log that is in GCS web viewer
          curl -s "$GCS_URL/artifacts/${{ github.repository }}/build-log.txt" -o log.txt || echo "Log download failed."

      - name: Run AI summarizer
        run: python3 workflows/summarize.py log.txt --model sshleifer/distilbart-cnn-12-6 > summary.txt

      - name: Comment on PR with summary
        if: ${{ github.event.check_run.pull_requests[0] != null }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.txt', 'utf8');
            const pr = context.payload.check_run.pull_requests[0];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `**AI Summary for Failed Job**: \`${context.payload.check_run.name}\`\n\n\`\`\`\n${summary}\n\`\`\`\n[Full logs](${context.payload.check_run.details_url})`,
            });
